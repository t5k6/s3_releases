#!/bin/bash

initializeANSI

# Consistent logging to screen and file
log_info() { echo -e "${g_l}INFO:${w_l}  $*${re_}"; }
log_warn() { echo -e "${y_l}WARN:${w_l}  $*${re_}"; }
log_error() { echo -e "${r_l}ERROR:${w_l} $*${re_}"; }
log_header() { echo -e "${p_l}----- $* -----${re_}"; }

# Wrapper for dialog menus to reduce boilerplate
# Usage: create_menu "extra_flags" "Menu Title" "Menu Text" height width menu_height "option1" "desc1" "option2" "desc2"
create_menu() {
    local extra_flags="$1" title="$2" text="$3" height="$4" width="$5" menu_height="$6"
    shift 6
    local options=("$@")
    local count=$((${#options[@]} / 2))

    "$gui" $extra_flags "$st_" "$bt_" "$title_" --title "$title" --menu "$text" "$height" "$width" "$menu_height" "${options[@]}"
}

# Securely execute a remote command using SSH keys (preferred)
# Usage: ssh_exec "user@host" "port" "remote command"
ssh_exec() {
    local remote_host="$1" port="$2" cmd="$3"
    ssh -p "$port" "$remote_host" -- "$cmd"
}

# Securely upload a file using SCP and SSH keys (preferred)
# Usage: scp_upload "local_file" "user@host" "port" "remote_path"
scp_upload() {
    local local_file="$1" remote_host="$2" port="$3" remote_path="$4"
    scp -P "$port" "$local_file" "${remote_host}:${remote_path}"
}

# Find the latest build for a given profile
find_latest_build_for_profile() {
    local profile_file="$1"
    local toolchain buildcamname

    if [ ! -f "$profdir/$profile_file" ]; then
        log_error "Profile file not found: $profdir/$profile_file"
        return 1
    fi

    # Load profile to get toolchain
    source "$profdir/$profile_file"

    cd "$bdir"
    # Find newest build by date for toolchain
    buildcamname="$(find . -type f \( -iname "*$toolchain*" ! -iname "*list_smargo" ! -iname "*.zip" \) -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" " | sed 's@./@@g')"
    cd "$workdir"

    if [ -z "$buildcamname" ]; then
        return 1
    fi

    echo "$buildcamname"
}

# Generalized function to build OpenSSL
build_openssl() {
    local prefix="$1" host="$2" cflags="$3" ldflags="$4" toolchain_path="$5" cc="$6"

    log_header "Building OpenSSL"

    # Set environment for the build
    export PATH="$toolchain_path/bin:$PATH"
    export CFLAGS="$cflags"
    export LDFLAGS="$ldflags"
    export CC="$cc"

    local config_flags="linux-generic32 shared no-tests"

    ./Configure --prefix="$prefix" "$config_flags" || { log_error "OpenSSL configure failed"; return 1; }
    make -j"$(CPUS)" || { log_error "OpenSSL make failed"; return 1; }
    make install_sw || { log_error "OpenSSL install failed"; return 1; }

    log_info "OpenSSL build complete."
}

# Generalized function to build a library (used for refactoring build logic later)
build_library() {
    local title="$1" libsrcdir="$2" logfile="$3"
    shift 3
    local tasks=("$@")

    _build_library "$title" "$libsrcdir" "$logfile" "${tasks[@]}"
}
