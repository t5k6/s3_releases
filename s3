#!/bin/bash

SIMPLEVERSION="2024.07"
VERSIONCOUNTER="$(git rev-list --count HEAD 2>/dev/null || echo "non-git")"
DEVELOPER="Gorgone, WXbet"
export NCURSES_NO_UTF8_ACS=1 # Required for dialog compatibility in some terminals

here_=$(pwd)
realdir=$(readlink -f "$0")
cd "$(dirname "$realdir")" || exit 1

#set dir_vars
workdir="$(pwd)"

# Ensure SimpleBuild3 is running from a Git repository for safety
if [[ ! -d "$workdir/.git" ]]; then
	echo "ERROR: SimpleBuild3 must be run from a Git repository."
	echo "Please clone the repository using: git clone <repository-url>"
	echo "Or ensure you are running from the correct directory."
	exit 1
fi

sdir="$workdir/support"
osdir="$sdir/os"
ldir="$sdir/logs"
adir="$sdir/archive"
configdir="$sdir/configs"
pdir="$sdir/patches"
profdir="$sdir/profiles"
bdir="$sdir/binaries"
sodir="$sdir/software"
dldir="$sdir/downloads"
fdir="$sdir/functions"
menudir="$sdir/menu_save"
brepo="$sdir/backup_repo"
tcdir="$sdir/toolchains"
tdir="$sdir/translation"
tccfgdir="$sdir/toolchains.cfg"

# Initialize error handling
source "$fdir/_error_handling.sh"
source "$fdir/_config_management.sh"
source "$fdir/_misc.sh"
err_setup

# Initialize system environment
sys_initialize_environment

#set arrays
array_names_a=(SHORT_PROTOCOLS SHORT_READERS SHORT_CARD_READERS AVAI_TCLIST
	MISS_TCLIST SHORT_ADDONS DISABLED_MODULES SHORT_MODULENAMES
	ALL_MODULES_LONG ENABLED_MODULES INST_TCLIST SSH_CONF_CONTENT module_configs)
array_names_A=(INTERNAL_MODULES USE_vars USE_vars_disable S3_CONFIGS)

for a_n in "${array_names_a[@]}"; do
	unset $a_n
	declare -a $a_n
done

for a_n in "${array_names_A[@]}"; do
	unset $a_n
	declare -A $a_n
done

USE_vars[USE_DIAG]=
USE_vars[USE_TARGZ]=
USE_vars[USE_PATCH]=
USE_vars[USE_STAPI]=
USE_vars[USE_STAPI5]=
USE_vars[USE_CONFDIR]=
USE_vars[USE_EXTRA]=
USE_vars[USE_STATIC]=
USE_vars[STATIC_LIBCRYPTO]=
USE_vars[STATIC_SSL]=
USE_vars[STATIC_LIBUSB]=
USE_vars[STATIC_PCSC]=
USE_vars[STATIC_LIBDVBCSA]=
USE_vars[USE_OSCAMNAME]=

# Private helper to check if a toolchain is available
_sys_is_available_toolchain() {
	local name="$1"
	for t in "${AVAI_TCLIST[@]}"; do
		[[ "$t" == "$name" ]] && return 0
	done
	return 1
}

# Private helper to check if a toolchain is installed
_sys_is_installed_toolchain() {
	local name="$1"
	for t in "${INST_TCLIST[@]}"; do
		[[ "$t" == "$name" ]] && return 0
	done
	return 1
}

cfg_set_value "s3" "USE_TARGZ" "0"
cfg_set_value "s3" "DIRECTMENU" "0"
cfg_set_value "s3" "NO_REPO_AUTOUPDATE" "0"
cfg_set_value "s3" "S3_UPDATE_CHECK" "1"
cfg_set_value "s3" "S3_URL_CHECK" "1"
cfg_set_value "s3" "INSTALL_NATIVE_LIBDVBCSA" "1"
cfg_set_value "s3" "PATCH_WEBIF" "1"
cfg_set_value "s3" "SAVE_LISTSMARGO" "1"
cfg_set_value "s3" "ADD_PROFILE_NAME" "0"
cfg_set_value "s3" "delete_oscamdebugbinary" "1"

#filled arrays
config_cases=(all addons protocols readers card_readers)
s3opts=(cedit checkout clean get_patch help lang_select loadonly menu profiles ssh_profiles repoclean repopatch reporestore sys_update_self sys_repair_self syscheck sysinfo tccheck tcrepair tedit update upload version) # extendable with plugins

CUSTOM_CONFDIR="not_set"
pf_name="not_set"

#internal vars
OPENBOX=0
UFS916003=0
URL_TOOLCHAIN_BASE_B64="VG9vbGNoYWluLQ=="

run="0"
cposx=0
cposy=0
on="_on"
off="_off"
pf="empty"
_verbose=""
menucall="no"
file_exist="0"
loadprofile="no"
s3cfg="$configdir/simplebuild.config"

# Apply any SOURCE-based override
repo_apply_source_override() {
	if [[ -z "$SOURCE" ]]; then
		return 0
	fi

	local forced_url_key="trunkurl$SOURCE"
	local forced_url_val
	forced_url_val=$(cfg_get_value "urls" "$forced_url_key")

	if [[ -n "$forced_url_val" ]]; then
		log_info "Overriding repository URL with '$forced_url_key' from environment."
		cfg_set_value "repo" "URL_OSCAM_REPO" "$forced_url_val"
	else
		log_warn "Environment variable SOURCE='$SOURCE' was set, but key '$forced_url_key' not found in URL configs."
		unset SOURCE
	fi
}

# Compiler settings
cc_warn="-W -Wall -Wshadow -Wredundant-decls -Wstrict-prototypes -Wold-style-definition"
#compiling options for minimize cpu load
cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -fomit-frame-pointer -fno-schedule-insns"
#compiling options for compatibility
#cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -o nodeadcode"
#compiling options for optimizing
#cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -o nodeadcode -ffast-math -fomit-frame-pointer -fthread-jumps -foptimize-strlen --no-inline"

# Load default URLs securely via UCM
if ! cfg_load_file "urls" "$configdir/urls"; then
	log_fatal "Failed to load default URLs from $configdir/urls" "$EXIT_MISSING"
fi

# Load custom URLs using UCM
if [ -f "$workdir/oscamsource.url" ]; then
	log_info "Loading custom repository URLs from oscamsource.url"
	cfg_load_file "urls" "$workdir/oscamsource.url"
fi

# Apply any SOURCE-based override
repo_apply_source_override

# Set the global URL_OSCAM_REPO from UCM (default or overridden)
URL_OSCAM_REPO=$(cfg_get_value "repo" "URL_OSCAM_REPO" "$(cfg_get_value "urls" "URL_OSCAM_REPO")")

#load translationlist
cd "$tdir" || exit 1
langsupport=(*)

#load functions and plugins
if [ -d "$fdir" ]; then
	cd "$fdir" || exit 1
	x=(*)
	for i in "${x[@]}"; do
		# Skip config_management.sh as it's already sourced above, and only source .sh files
		if [ "$i" != "_config_management.sh" ] && [[ "$i" == *.sh ]]; then
			source "./$i"
			plugin=$(awk '/^#simplebuild_plugin/ {printf $2}' "$i")
			[ -z "$plugin" ] || s3opts+=("$plugin")
		fi
	done
else
	log_fatal "Functions directory '$fdir' not found. Critical failure." "$EXIT_MISSING"
fi

#set additional dir_vars
REPO="$(repo_get_type)"
ID_SUFFIX="$(repo_get_identifier)"
if [[ -n "$ID_SUFFIX" ]]; then
	ID="-$ID_SUFFIX"
fi
repodir="$workdir/oscam-${REPO}${ID}"
ispatched="$workdir/${REPO^^}${ID}-IS-PATCHED"

#software build support
if [ -d "$sodir" ]; then
	cd "$sodir" || exit 1
	x=(*)
	for i in "${x[@]}"; do
		if [ -f "$i" ] && [[ "$i" == *.sh ]]; then
			source "./$i"
			plugin=$(awk '/^#simplebuild_plugin/ {printf $2}' "$i")
			[ -z "$plugin" ] || s3opts+=("$plugin")
		fi
	done
fi

#initialize simplebuild
initializeANSI     # load colors
sys_language_apply # echo "info $txt_load_ok";
# read simplebuild config
cfg_load_file "s3" "$s3cfg"
S3_LOG_LEVEL=$(cfg_get_value "s3" "S3_LOG_LEVEL" "2")

# Create a unique log file for this specific run.
export MAIN_LOG_FILE="$ldir/s3_run_$(date +%F_%H-%M-%S)_$$.log"
echo "--- SimpleBuild3 Run Started: $(date) ---" >"$MAIN_LOG_FILE"

log_info "Global logging initiated. Full output is being captured in: $MAIN_LOG_FILE"

# - `_cmd_build` is the actual pipeline runner. This function is responsible for
#   parsing the command-line arguments and setting up the global state (`module_configs`,
#   `USE_vars`, etc.) that the build pipeline consumes.
_s3_run_cli_build() {
	local toolchain_name="$1"
	shift

	# Process all arguments
	while [[ $# -gt 0 ]]; do
		local arg="$1"
		case "$arg" in
		-p=*)
			local loaded_profile_name="${arg#*=}"
			local profile_path="$profdir/$loaded_profile_name"

			if [[ -f "$profile_path" ]]; then
				log_info "Loading legacy profile '$loaded_profile_name' from CLI..."
				# This loads a space-separated list of flags into a single variable
				local profile_flags
				profile_flags=$(cat "$profile_path")
				for flag in $profile_flags; do
					# Recursively call argument handler
					_s3_process_cli_arg "$flag"
				done
			else
				log_error "Profile '$loaded_profile_name' not found in $profdir"
			fi
			;;
		-c=*)
			CUSTOM_CONFDIR="${arg#*=}"
			log_debug "Custom confdir set to: $CUSTOM_CONFDIR"
			;;
		*)
			_s3_process_cli_arg "$arg"
			;;
		esac
		shift
	done

	log_debug "Building with toolchain '$toolchain_name', ${#module_configs[@]} module settings."

	# Invoke the unified command-line build pipeline.
	if _cmd_build "$toolchain_name"; then
		log_info "Build completed successfully."
		log_info "To upload the new binary, run: ${0##*/} upload <profile_name>"
	else
		log_error "Build failed. Check the log file: $MAIN_LOG_FILE"
		exit 1
	fi
}

# Helper to process a single CLI argument for the build command.
_s3_process_cli_arg() {
	local arg="$1"
	# Module on/off commands
	if [[ "$arg" =~ _on$ || "$arg" =~ _off$ ]]; then
		module_configs+=("$arg")
		return
	fi

	# Check if it's a USE_var
	if [[ -v "USE_vars[$arg]" ]]; then
		USE_vars["$arg"]="1"
		log_debug "Setting USE_var: $arg=1"
		return
	fi

	# If not handled, it's a general module config command
	module_configs+=("$arg")
}

# --- Command-Line Action Handlers ---
# These functions abstract the logic formerly in the main `case` statement.

sys_toolchain_load() {
	local toolchain_name="$1"
	if [[ -z "$toolchain_name" ]]; then
		log_error "Toolchain parameter missing for 'loadonly' command."
		ui_show_help_toolchains
		return 1
	fi

	if ! _sys_is_available_toolchain "$toolchain_name"; then
		log_error "Toolchain '$toolchain_name' is not available."
		return 1
	fi
	if ! _toolchain_install_archive "$toolchain_name" "install"; then
		log_error "Failed to load toolchain '$toolchain_name'."
		return 1
	fi
	log_info "Toolchain '$toolchain_name' has been loaded successfully."
}

sys_toolchain_check() {
	local toolchain_name="$1"
	if [[ -z "$toolchain_name" ]]; then
		log_error "Toolchain parameter missing for 'tccheck' command."
		return 1
	fi

	if ! _sys_is_available_toolchain "$toolchain_name"; then
		log_error "Toolchain '$toolchain_name' is not available."
		return 1
	fi
	if _toolchain_check "$toolchain_name"; then
		log_info "Toolchain '$toolchain_name' check passed."
	else
		log_error "Toolchain '$toolchain_name' check failed. Please repair or reinstall."
	fi
}

sys_toolchain_repair() {
	local toolchain_name="$1"
	if [[ -z "$toolchain_name" ]]; then
		log_error "Toolchain parameter missing for 'tcrepair' command."
		return 1
	fi
	if ! _sys_is_installed_toolchain "$toolchain_name"; then
		log_error "Toolchain '$toolchain_name' is not installed."
		return 1
	fi
	if ! validate_command "Repairing toolchain '$toolchain_name'" sys_repair_toolchain "$toolchain_name"; then log_fatal "Failed to repair toolchain '$toolchain_name'" "$EXIT_ERROR"; fi
	sleep 2
}

sys_upload_cam() {
	local profile_name="$1"
	if [[ -z "$profile_name" ]]; then
		log_info "No profile specified. Please provide a profile name (e.g., my_profile.ssh)."
		sys_list_ssh_profiles
	else
		net_upload_cam_profile "$profile_name"
	fi
}

sys_toolchain_edit_confdir() {
	local toolchain_name="$1"
	if ! _sys_is_installed_toolchain "$toolchain_name"; then
		log_error "Toolchain '$toolchain_name' is not installed. Cannot edit its configuration."
		return 1
	fi
	ui_edit_toolchain_confdir "$toolchain_name"
}

# check system #########################################################
err_push_context "System Initialization"
if ! sys_run_check; then
	log_error "System prerequisite check failed. Please run './s3 syscheck auto now' to install missing packages."
	sleep 5 && sys_exit
fi
err_pop_context
########################################################################

sys_create_native_toolchain_profile # put native datas to toolchains and configs
# If the action isn't one that works without a repository, populate module definitions.
if [[ "$1" != "checkout" && "$1" != "clean" && "$1" != "repoclean" && "$1" != "reporestore" ]]; then
	if ! sys_populate_module_and_use_vars; then
		log_warn "Could not populate module definitions. Some features may be unavailable."
	fi
fi
module_create_arrays         # fill module arrays
toolchain_fill_arrays        # get # AVAI_TCLIST # INST_TCLIST # MISS_TCLIST
systype=$(sys_get_arch_type) # check used uname

if [ -z "$1" ]; then
	[ "$(cfg_get_value "s3" "DIRECTMENU")" == "1" ] && repo_checkout_interactive && exit
	ui_show_help
	exit

else
	cmd="$1"
	shift
	case "$cmd" in
	# --- Core Commands ---
	checkout)
		repo_checkout "$@"
		;;
	clean)
		repo_clean "$@"
		;;
	update)
		repo_update "$@"
		;;
	menu)
		ui_show_main_menu "$@"
		;;
	help)
		ui_show_help
		;;
	version)
		sys_show_version
		;;

	# --- Repository Management ---
	repoclean)
		repo_clean "$@"
		;;
	repopatch)
		patch_apply_console "$@"
		;;
	reporestore)
		repo_restore "$@"
		;;

	# --- Toolchain Management ---
	loadonly)
		sys_toolchain_load "$@"
		;;
	tccheck)
		sys_toolchain_check "$@"
		;;
	tcrepair)
		sys_toolchain_repair "$@"
		;;
	tedit)
		sys_toolchain_edit_confdir "$@"
		;;

	# --- System & Config ---
	cedit)
		sys_edit_s3_config "$@"
		;;
	lang_select) # DEPRECATED, handled by system menu
		ui_menu_language_select "$@"
		;;
	profiles)
		sys_show_profiles "$@"
		;;
	ssh_profiles | plugin_edit_ssh_profile)
		plugin_edit_ssh_profile "$@"
		;;
	list_ssh_profiles)
		list_ssh_profiles "$@"
		;;
	sys_update_self)
		sys_update_self "$@"
		;;
	sys_repair_self)
		sys_repair_self "$@"
		;;
	syscheck)
		sys_run_checks_interactive "auto" "$@"
		;;
	sysinfo)
		sys_show_info "$@"
		;;

	# --- Build & Upload ---
	upload)
		sys_upload_cam "$@"
		;;
	get_patch)
		patch_download_from_urls "$@"
		;;

	*)
		# If the command is not a known option, check if it's a toolchain name
		if [[ " ${AVAI_TCLIST[*]} " == *" $cmd "* ]]; then
			_s3_run_cli_build "$cmd" "$@"
		else
			log_error "Unknown command: '$cmd'"
			ui_show_help
		fi
		;;
	esac
	exit
fi
exit
