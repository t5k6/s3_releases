#!/bin/bash

SIMPLEVERSION="2024.07"
VERSIONCOUNTER="$(git rev-list --count HEAD 2>/dev/null || printf "$(echo "$SIMPLEVERSION" | sed -e 's/\(.\)/\1\+0/g' | bc)_non-git")"
DEVELOPER="Gorgone, WXbet"
OIFS=$IFS
export NCURSES_NO_UTF8_ACS=1

here_=$(pwd)
realdir=$(readlink -f $0)
cd "$(dirname $realdir)"

#set dir_vars
workdir="$(pwd)"
sdir="$workdir/support"
osdir="$sdir/os"
ldir="$sdir/logs"
adir="$sdir/archive"
configdir="$sdir/configs"
pdir="$sdir/patches"
profdir="$sdir/profiles"
bdir="$sdir/binaries"
sodir="$sdir/software"
dldir="$sdir/downloads"
fdir="$sdir/functions"
menudir="$sdir/menu_save"
brepo="$sdir/backup_repo"
tcdir="$sdir/toolchains"
tdir="$sdir/translation"
tccfgdir="$sdir/toolchains.cfg"

# create folders
mkdir -p "$tcdir/native/bin" 2>/dev/null
mkdir -p $sdir/{archive,binaries,downloads,software,logs,patches,backup_repo,menu_save} 2>/dev/null
[ -f $sdir/patches/no.patch ] && rm -f $sdir/patches/no.patch 2>/dev/null

# some migrations of deprecated directories
for migdir in backup_svn backup_git; do
	if [ -d "$sdir/$migdir" ]; then
		shopt -s dotglob
		mv -f "$sdir/$migdir"/* "$brepo/" 2>/dev/null
		shopt -u dotglob
		mv "$brepo/last.tar.gz" "$brepo/last${migdir: -3}.tar.gz" 2>/dev/null
		ln -fs "$(readlink "$brepo/last${migdir: -3}.tar.gz" | awk -F'/' '{ print $NF }')" "$brepo/last${migdir: -3}.tar.gz"
		rm -d "$sdir/$migdir"
	fi
done

# create links
[ ! -d "$ldir" ] && clear && echo -e "\n folder creation error\n\n" && exit
[ -L "$workdir/logs" ] || ln -frs "$ldir" "$workdir/logs" 2>/dev/null
[ -L "$workdir/archive" ] || ln -frs "$adir" "$workdir/archive" 2>/dev/null
[ -L "$workdir/patches" ] || ln -frs "$pdir" "$workdir/patches" 2>/dev/null
[ -L "$workdir/binaries" ] || ln -frs "$bdir" "$workdir/binaries" 2>/dev/null
[ -L "$workdir/software" ] || ln -frs "$sodir" "$workdir/software" 2>/dev/null
[ -L "$workdir/profiles" ] || ln -frs "$profdir" "$workdir/profiles" 2>/dev/null

#set arrays
array_names_a=(SHORT_PROTOCOLS SHORT_READERS SHORT_CARD_READERS AVAI_TCLIST
	MISS_TCLIST SHORT_ADDONS DISABLED_MODULES SHORT_MODULENAMES
	ALL_MODULES_LONG ENABLED_MODULES INST_TCLIST SSH_CONF_CONTENT)
array_names_A=(INTERNAL_MODULES USE_vars USE_vars_disable S3_CONFIGS)

for a_n in "${array_names_a[@]}"; do
	unset $a_n
	declare -a $a_n
done

for a_n in "${array_names_A[@]}"; do
	unset $a_n
	declare -A $a_n
done

USE_vars[USE_DIAG]=
USE_vars[USE_TARGZ]=
USE_vars[USE_PATCH]=
USE_vars[USE_STAPI]=
USE_vars[USE_STAPI5]=
USE_vars[USE_CONFDIR]=
USE_vars[USE_EXTRA]=
USE_vars[USE_STATIC]=
USE_vars[STATIC_LIBCRYPTO]=
USE_vars[STATIC_SSL]=
USE_vars[STATIC_LIBUSB]=
USE_vars[STATIC_PCSC]=
USE_vars[STATIC_LIBDVBCSA]=
USE_vars[USE_OSCAMNAME]=

source "$fdir/_error_handling.sh"
source "$fdir/_config_management.sh"

cfg_set_value "s3" "USE_TARGZ" "0"
cfg_set_value "s3" "DIRECTMENU" "0"
cfg_set_value "s3" "NO_REPO_AUTOUPDATE" "0"
cfg_set_value "s3" "S3_UPDATE_CHECK" "1"
cfg_set_value "s3" "S3_URL_CHECK" "1"
cfg_set_value "s3" "INSTALL_NATIVE_LIBDVBCSA" "1"
cfg_set_value "s3" "PATCH_WEBIF" "1"
cfg_set_value "s3" "SAVE_LISTSMARGO" "1"
cfg_set_value "s3" "ADD_PROFILE_NAME" "0"
cfg_set_value "s3" "delete_oscamdebugbinary" "1"

#filled arrays
config_cases=(all addons protocols readers card_readers)
s3opts=(cedit checkout clean get_patch help lang_select loadonly menu profiles ssh_profiles repoclean repopatch reporestore sys_update_self sys_repair_self syscheck sysinfo tccheck tcrepair tedit update upload version) # extendable with plugins

CUSTOM_CONFDIR="not_set"
pf_name="not_set"

#internal vars
OPENBOX=0
UFS916003=0
URL_TOOLCHAIN_BASE_B64="VG9vbGNoYWluLQ=="

run="0"
cposx=0
cposy=0
on="_on"
off="_off"
pf="empty"
_verbose=""
menucall="no"
file_exist="0"
loadprofile="no"
s3cfg="$configdir/simplebuild.config"

# Compiler settings
cc_warn="-W -Wall -Wshadow -Wredundant-decls -Wstrict-prototypes -Wold-style-definition"
#compiling options for minimize cpu load
cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -fomit-frame-pointer -fno-schedule-insns"
#compiling options for compatibility
#cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -o nodeadcode"
#compiling options for optimizing
#cc_opts="-ggdb -pipe -ffunction-sections -fdata-sections -o nodeadcode -ffast-math -fomit-frame-pointer -fthread-jumps -foptimize-strlen --no-inline"

#load default urls
source "$configdir/urls"

# Load custom URLs using UCM
if [ -f "$workdir/oscamsource.url" ]; then
	log_info "Loading custom repository URLs from oscamsource.url"
	cfg_load_file "urls" "$workdir/oscamsource.url"
fi

# Switch trunkurl based on environment variable SOURCE
if [[ -n "$SOURCE" ]]; then
	forced_url_key="trunkurl$SOURCE"
	forced_url_val=$(cfg_get_value "urls" "$forced_url_key")
	if [[ -n "$forced_url_val" ]]; then
		log_info "Overriding repository URL with '$forced_url_key' from environment."
		URL_OSCAM_REPO="$forced_url_val" # Overwrite the global directly
	else
		log_warn "Environment variable SOURCE='$SOURCE' was set, but key '$forced_url_key' not found in URL configs."
		unset SOURCE
	fi
fi

#load translationlist
cd "$tdir"
langsupport=(*)

#load functions and plugins
if [ -d "$fdir" ]; then
	cd "$fdir"
	x=(*)
	for i in "${x[@]}"; do
		# Skip config_management.sh as it's already sourced above, and only source .sh files
		# Also skip the new build pipeline, as it's called by the wrappers.
		if [ "$i" != "_config_management.sh" ] && [ "$i" != "_build_pipeline.sh" ] && [[ "$i" == *.sh ]]; then
			source "$i"
			plugin=$(awk '/^#simplebuild_plugin/ {printf $2}' $i)
			[ -z "$plugin" ] || s3opts+=($plugin)
		fi
	done

	source "$fdir/_build_pipeline.sh"
else
	echo "fail functions"
fi

#set additional dir_vars
REPO="$(REPOTYPE)"
ID="$(echo "$(REPOIDENT)" | tr ' ' '-')"
repodir="$workdir/oscam-${REPO}${ID}"
ispatched="$workdir/${REPO^^}${ID}-IS-PATCHED"

#software build support
if [ -d "$sodir" ]; then
	cd "$sodir"
	x=(*)
	for i in "${x[@]}"; do
		if [ -f "$i" ] && [[ "$i" == *.sh ]]; then
			source "$i"
			plugin=$(awk '/^#simplebuild_plugin/ {printf $2}' $i)
			[ -z "$plugin" ] || s3opts+=($plugin)
		fi
	done
fi

#initialize simplebuild
initializeANSI # load colors
auto_langset   # echo "info $txt_load_ok";
# read simplebuild config
cfg_load_file "s3" "$s3cfg"
S3_LOG_LEVEL=$(cfg_get_value "s3" "S3_LOG_LEVEL" "2")

# Create a unique log file for this specific run.
MAIN_LOG_FILE="$ldir/s3_run_$(date +%F_%H-%M-%S)_$$.log"

# --- GLOBAL LOGGING REDIRECTION ---
# The sed command strips ANSI escape codes (colors, cursor movement, etc.)
# before writing to the log file, ensuring it is clean plain text.
# The console output from tee remains untouched, preserving colors.
ansi_stripper_cmd="sed -r 's/\x1b\[[0-9;]*[a-zA-Z]//g'"

# Redirect stdout and stderr through tee. One stream goes to the console (raw),
# the other is piped through the ANSI stripper and appended to the log file.
exec > >(tee >(eval "$ansi_stripper_cmd" >>"$MAIN_LOG_FILE")) \
2> >(tee >(eval "$ansi_stripper_cmd" >>"$MAIN_LOG_FILE") >&2)

log_info "Global logging initiated. Full output is being captured in: $MAIN_LOG_FILE"

build_run_from_cli() {
	local toolchain_name="$1"
	shift
	while [[ $# -gt 0 ]]; do
		local arg="$1"
		case "$arg" in
		-p=* | -P=*)
			pf_name="${arg#*=}"
			if [ -f "$profdir/$pf_name" ]; then
				pf=$(cat "$profdir/$pf_name")
			fi
			;;
		-c=* | -C=*)
			CUSTOM_CONFDIR="${arg#*=}"
			;;
		*on | *off)
			all_cc+=("$arg")
			;;
		*)
			# Handle USE_vars
			for uvar in "${!USE_vars[@]}"; do
				if [ "$arg" == "$uvar" ]; then
					USE_vars[$uvar]="$uvar=1"
					shift
					continue
				fi
			done
			# Add to all_cc if not handled?
			all_cc+=("$arg")
			;;
		esac
		shift
	done
	if [ "$pf_name" != "not_set" ] && [ "$pf" != "empty" ]; then
		# Handle profile by parsing pf as additional cmds, prepend all_off
		for cmd in all_off $pf; do
			# Parse as before, but simplified
			if [[ "$cmd" == *on || "$cmd" == *off ]]; then
				all_cc+=("$cmd")
			fi
		done
	fi
	build_prepare_toolchain "$toolchain_name"
	_cmd_build "$toolchain_name"
}

# check system #########################################################
if ! sys_run_check; then
	log_error "System prerequisite check failed. Please install missing packages and try again."
	sleep 5 && bye
fi
########################################################################

_create_native_profile # put native datas to toolchains and configs
_get_config_con "$1"   # echo $addons;exit;
_create_module_arrays  # fill module arrays
_fill_tc_array         # get # AVAI_TCLIST # INST_TCLIST # MISS_TCLIST
_set_dialog_types      # fill $gui vars
_systype               # check used uname

if [ -z "$1" ]; then
	[ "$(cfg_get_value "s3" "DIRECTMENU")" == "1" ] && _dialog_checkout && exit
	ui_show_help
	exit

else
	for e in "${s3opts[@]}"; do

		if [ "$e" == "$1" ]; then

			case $e in

			checkout | reporestore)
				if [ ! -n "$2" ]; then
					eval "$e"
				else
					eval "$e" "$2"
				fi
				exit
				;;
			sys_update_self | sys_repair_self)
				if ! validate_command "Executing $e" "$e"; then
					log_fatal "$e operation failed." "$EXIT_ERROR"
				fi
				exit
				;;

			clean)
				repo_clean
				exit
				;;

			menu)
				if [ ! -n "$2" ]; then
					ui_show_main_menu
				else
					ui_show_main_menu "$2" # Pass along arg if needed, though new menu may not use it
				fi
				;;

			loadonly)
				if [ ! -n "$2" ]; then
					_nl
					clear
					s3logo
					echo -e "$r_l\n  $txt_error: toolchain $txt_parameter $txt_missing\n""$w_l"
					ui_show_help_toolchains
					sleep 2
					exit
				else
					for t in "${AVAI_TCLIST[@]}"; do
						_tmp="$2"
						[ "$t" == "$2" ] && _load_toolchain "$2" && break
					done
					if [ -f "$tc_dl" ]; then
						echo -e "$p_l\n\n  toolchain for $_tmp loaded\n"
					else
						_nl
						clear
						s3logo
						printf "$r_l  toolchain missing/error\n"
					fi
					exit
				fi
				;;

			tccheck)
				if [ ! -n "$2" ]; then
					_nl
					clear
					s3logo
					printf "$r_l\n  $txt_error: toolchain $txt_parameter $txt_missing\n""$w_l"
					ui_show_help_toolchains
					printf "$W"
					sleep 2
					exit
				else
					for t in "${AVAI_TCLIST[@]}"; do
						[ "$t" == "$2" ] && _toolchain_check "$2" && break
					done
					_nl
					clear
					s3logo
					printf "$r_l\n  toolchain missing/error\n$w_l"
					ui_show_help_toolchains
					echo -e "$W"
					sleep 2
					exit
				fi
				;;

			tcrepair)
				if [ ! -n "$2" ]; then
					clear
					s3logo
					printf "$r_l\n  $txt_error: toolchain $txt_parameter $txt_missing\n""$w_l"
					ui_show_help_toolchains
					printf "$W"
					sleep 2
					exit
				else
					_nl
					clear
					sys_repair_toolchain "$2"
					sleep 2
					exit
				fi
				;;

			upload)
				if [ ! -n "$2" ]; then
					_nl
					clear
					s3logo
					echo -e "$r_l\n  $txt_error: $txt_parameter $txt_missing""$w_l"
					menucall="yes" # This global seems to be part of the legacy flow
					ssh_profiles
				else
					net_upload_cam_profile "$2"
				fi
				exit
				;;

			syscheck)
				syscheck silent $2
				exit
				;;

			tedit)
				if [ -n "$2" ]; then
					for telement in ${INST_TCLIST[@]}; do
						if [ "$telement" == "$2" ]; then
							toolchain_edit_confdir_menu "$2"
							exit
						fi
					done
					clear
					s3logo
					printf "$w_l\n  $2 toolchain not installed\n"$W
				fi
				exit
				;;

			help)
				ui_show_help
				exit
				;;

			cedit | clean | help | lang_select | menu | profiles | ssh_profiles | repoclean | repopatch | reporestore | sys_update_self | sys_repair_self | syscheck | sysinfo | tccheck | tcrepair | tedit | update | upload | version | tcupdate | list_ssh_profiles | ssh_editor)
				shift && "$e" "$@"
				exit
				;;
			esac

		fi
	done

	if [[ " ${AVAI_TCLIST[*]} " == *" $1 "* ]]; then
		build_run_from_cli "$@"
		exit
	fi
	ui_show_help
fi
exit
